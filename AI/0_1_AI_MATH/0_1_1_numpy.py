import numpy as np

arr = np.array([1, 2, 3, 4, 5])

a = np.array([[1, 2], [3, 4]])

b = np.array([[4, 3], [2, 1]])

# 배열 곱 연산 : @
print(a @ b)

# 다차원 배열 생성
arr_2d = np.array([[10, 20, 30], [40, 50, 60]])
print(arr_2d)

# 단위 행렬 (사각행렬에서만 만들 수 있음 -> 인자 1개만 받음 -> n x n 행렬생성)
# 곱해서 다시 자기 자신이 나오는 행렬
x = np.eye(3)
"""
[[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]]
"""
print(x)

# 행렬의 원소를 인덱스를 바탕으로 변경하기
x[0, 2] = 47
"""
[[ 1.  0. 47.]
 [ 0.  1.  0.]
 [ 0.  0.  1.]]
"""
print(x)

# 무작위 정수 만들기
arr_ran = np.random.randint(low=50, high=101, size=5) # 50 ~ 101 사이 5개 숫자
print(arr_ran)

# 정규 분포 추출
std_ran = np.random.randn(3, 3) # 3 x 3 행렬로 만들기
"""
[[-0.08531655  0.20857107 -0.77133599]
 [-0.80439645 -0.77821948 -0.12272984]
 [-0.06433918 -2.85584401 -1.66840389]]
"""
print(std_ran)

# 연산 / 형변환
id_3 = np.eye(3)
std_ran = np.random.randn(3, 3)
z = np.dot(id_3, std_ran)   # 다양한 차원에 대한 대상에 대해 곱하는 연산을 알아서 수행
print(z)


# 각 원소의 형변환
id_bool = id_3.astype(bool)
"""
[[ True False False]
 [False  True False]
 [False False  True]]
"""
print(id_bool)
id_int = id_3.astype(int)
"""
[[1 0 0]
 [0 1 0]
 [0 0 1]]
"""
print(id_int)

# 상수 곱 (스칼라 배)
x_float = id_3 * 1.1
"""
[[1.1 0.  0. ]
 [0.  1.1 0. ]
 [0.  0.  1.1]]
"""
print(x_float)


# 벡터 연습(numpy 활용법 추가)
# 기본 벡터 생성
v = np.array([1, 2, 3])

# v 를 반복 복제
v_repeated = np.tile(v, (3, 2))  # 2번 복제해서 3열로 만들기
"""
[[1 2 3 1 2 3]
 [1 2 3 1 2 3]
 [1 2 3 1 2 3]]
"""
print(v_repeated)

# 다차원 행렬을 평탄화
v_flattened = v_repeated.flatten()
"""
[1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3]
"""
print(v_flattened)

# 균등한 간격을 가지는 일정 크기의 벡터를 생성
thetas = np.linspace(0, 2 * np.pi, 120)   # 0 ~ 2*pi 까지 120등분
"""
[0.         0.05279988 0.10559975 0.15839963 0.21119951 0.26399938
 0.31679926 0.36959914 0.42239901 0.47519889 0.52799877 0.58079864
 0.63359852 0.68639839 0.73919827 0.79199815 0.84479802 0.8975979
 0.95039778 1.00319765 1.05599753 1.10879741 1.16159728 1.21439716
 1.26719704 1.31999691 1.37279679 1.42559667 1.47839654 1.53119642
 1.5839963  1.63679617 1.68959605 1.74239593 1.7951958  1.84799568
 1.90079556 1.95359543 2.00639531 2.05919518 2.11199506 2.16479494
 2.21759481 2.27039469 2.32319457 2.37599444 2.42879432 2.4815942
 2.53439407 2.58719395 2.63999383 2.6927937  2.74559358 2.79839346
 2.85119333 2.90399321 2.95679309 3.00959296 3.06239284 3.11519272
 3.16799259 3.22079247 3.27359234 3.32639222 3.3791921  3.43199197
 3.48479185 3.53759173 3.5903916  3.64319148 3.69599136 3.74879123
 3.80159111 3.85439099 3.90719086 3.95999074 4.01279062 4.06559049
 4.11839037 4.17119025 4.22399012 4.27679    4.32958988 4.38238975
 4.43518963 4.48798951 4.54078938 4.59358926 4.64638913 4.69918901
 4.75198889 4.80478876 4.85758864 4.91038852 4.96318839 5.01598827
 5.06878815 5.12158802 5.1743879  5.22718778 5.27998765 5.33278753
 5.38558741 5.43838728 5.49118716 5.54398704 5.59678691 5.64958679
 5.70238667 5.75518654 5.80798642 5.86078629 5.91358617 5.96638605
 6.01918592 6.0719858  6.12478568 6.17758555 6.23038543 6.28318531]
"""
print(thetas)

# 각 원소에 삼각함수 적용
sin_thetas = np.sin(thetas)
"""
[ 0.00000000e+00  5.27753471e-02  1.05403600e-01  1.57738074e-01
  2.09632904e-01  2.60943449e-01  3.11526698e-01  3.61241666e-01
  4.09949789e-01  4.57515308e-01  5.03805651e-01  5.48691796e-01
  5.92048639e-01  6.33755336e-01  6.73695644e-01  7.11758240e-01
  7.47837039e-01  7.81831482e-01  8.13646821e-01  8.43194380e-01
  8.70391805e-01  8.95163291e-01  9.17439797e-01  9.37159234e-01
  9.54266640e-01  9.68714334e-01  9.80462047e-01  9.89477037e-01
  9.95734176e-01  9.99216026e-01  9.99912882e-01  9.97822801e-01
  9.92951609e-01  9.85312882e-01  9.74927912e-01  9.61825643e-01
  9.46042594e-01  9.27622754e-01  9.06617463e-01  8.83085266e-01
  8.57091753e-01  8.28709371e-01  7.98017227e-01  7.65100867e-01
  7.30052033e-01  6.92968413e-01  6.53953365e-01  6.13115633e-01
  5.70569037e-01  5.26432163e-01  4.80828028e-01  4.33883739e-01
  3.85730138e-01  3.36501439e-01  2.86334849e-01  2.35370193e-01
  1.83749518e-01  1.31616700e-01  7.91170425e-02  2.63968718e-02
 -2.63968718e-02 -7.91170425e-02 -1.31616700e-01 -1.83749518e-01
 -2.35370193e-01 -2.86334849e-01 -3.36501439e-01 -3.85730138e-01
 -4.33883739e-01 -4.80828028e-01 -5.26432163e-01 -5.70569037e-01
 -6.13115633e-01 -6.53953365e-01 -6.92968413e-01 -7.30052033e-01
 -7.65100867e-01 -7.98017227e-01 -8.28709371e-01 -8.57091753e-01
 -8.83085266e-01 -9.06617463e-01 -9.27622754e-01 -9.46042594e-01
 -9.61825643e-01 -9.74927912e-01 -9.85312882e-01 -9.92951609e-01
 -9.97822801e-01 -9.99912882e-01 -9.99216026e-01 -9.95734176e-01
 -9.89477037e-01 -9.80462047e-01 -9.68714334e-01 -9.54266640e-01
 -9.37159234e-01 -9.17439797e-01 -8.95163291e-01 -8.70391805e-01
 -8.43194380e-01 -8.13646821e-01 -7.81831482e-01 -7.47837039e-01
 -7.11758240e-01 -6.73695644e-01 -6.33755336e-01 -5.92048639e-01
 -5.48691796e-01 -5.03805651e-01 -4.57515308e-01 -4.09949789e-01
 -3.61241666e-01 -3.11526698e-01 -2.60943449e-01 -2.09632904e-01
 -1.57738074e-01 -1.05403600e-01 -5.27753471e-02 -2.44929360e-16]
"""
print(sin_thetas)

# 시각화
import matplotlib.pyplot as plt
plt.plot(thetas, sin_thetas)
plt.title('sin curve')
plt.xlabel('theta(radians)')
plt.ylabel('sin(theta)')
plt.show()